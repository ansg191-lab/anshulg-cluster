apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lldap.fullname" . }}
  labels:
    {{- include "lldap.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "lldap.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lldap.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lldap.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: UID
              value: "1000"
            - name: GID
              value: "1000"
            - name: TZ
              value: "Etc/UTC"
            - name: LLDAP_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: jwt_secret
                  name: lldap-secrets
            - name: LLDAP_KEY_SEED
              valueFrom:
                secretKeyRef:
                  key: key_seed
                  name: lldap-secrets
            - name: LLDAP_LDAP_BASE_DN
              value: "dc=anshulg,dc=com"
            - name: LLDAP_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: db_url
                  name: lldap-secrets
          ports:
            - name: ldap
              containerPort: 3890
              protocol: TCP
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      initContainers:
        - name: wait-for-postgres
          image: "postgres:16.3"
          command:
            - 'sh'
            - '-c'
            - >
              until pg_isready -h {{ .Release.Name }}-postgresql -p {{ .Values.postgresql.primary.service.ports.postgresql }} -U "postgres" -d {{ .Values.postgresql.auth.database }} -t 5; do
                sleep 1;
              done;
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
